* Plugins
** Install specified packages
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
     (require 'cl)
     (defvar zxf/packages '(
			    company
			    monokai-theme
			    hungry-delete
			    ivy
			    counsel
			    helm-ag
			    web-mode
			    flycheck
			    swiper
			    popwin
			    expand-region
			    evil
			    evil-org
			    htmlize
			    evil-visual-mark-mode
			    yasnippet
			    yasnippet-snippets
			    ) "Default packages")
     (setq package-selected-packages zxf/packages)
     (defun zxf/packages-installed-p ()
       (loop for pkg in zxf/packages
	     when (not (package-installed-p pkg)) do (return nil)
	     finally (return t)))
     (unless (zxf/packages-installed-p)
       (message "%s" "Refreshing package database...")
       (package-refresh-contents)
       (dolist (pkg zxf/packages)
	 (when (not (package-installed-p pkg))
	   (package-install pkg))))
   #+END_SRC
   
** Utils
   #+BEGIN_SRC emacs-lisp
     (defun quick-open-init-file()
	 (interactive)
       (find-file "~/.emacs.d/init.el"))
     (global-set-key (kbd "<f4>") 'quick-open-init-file)
   #+END_SRC
   
* UI
** Better Default
   #+BEGIN_SRC emacs-lisp
     (load-theme 'monokai t) ;need to install monokai-theme first
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (global-hl-line-mode t) ;highlight current row
     (global-linum-mode t)
     (add-to-list 'default-frame-alist '(fullscreen . maximized)) ;maximize window on startup
     (fset 'yes-or-no-p 'y-or-n-p)
     (set-face-attribute 'default nil :family "Consolas" :height 130)
   #+END_SRC
* Edit
** Vim-like
*** evil
*** Enable evil
     #+BEGIN_SRC emacs-lisp
       (require 'evil)
       (evil-mode 1)
     #+END_SRC

*** Add extra keybindings to cover the shortage of evil (towards the default vim)
     - Use c-h to delete char
       #+BEGIN_SRC emacs-lisp
	 (define-key evil-insert-state-map "\C-h" 'evil-delete-backward-char)
       #+END_SRC
     - Use C-u to scroll up in normal mode
       #+BEGIN_SRC emacs-lisp
	 (setq evil-want-C-u-scroll t)
	 (setq evil-want-C-d-scroll t)
       #+END_SRC
     - Treat `underscore_word` as one single word, not two
       #+BEGIN_SRC emacs-lisp
	 (with-eval-after-load 'evil
	     (defalias #'forward-evil-word #'forward-evil-symbol))
       #+END_SRC
     - Use TAB to org-cycle in [org-mode && evil-normal mode]
       #+BEGIN_SRC emacs-lisp
	 (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle)
       #+END_SRC

*** evil-org
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/plugins/evil-org")
     (require 'evil-org)
     (add-hook 'org-mode-hook 'evil-org-mode)
     (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
     (require 'evil-org-agenda)
     (evil-org-agenda-set-keys)
     (setq evil-want-C-i-jump nil)
     (require 'org-tempo)
   #+END_SRC
*** Org-agenda Vim Keybindings                              :orgmode:evil:
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'org-agenda
   '(progn
      (evil-set-initial-state 'org-agenda-mode 'normal)
      (evil-define-key 'normal org-agenda-mode-map
	(kbd "<RET>") 'org-agenda-switch-to
	(kbd "\t") 'org-agenda-goto

	"q" 'org-agenda-quit
	"r" 'org-agenda-redo
	"S" 'org-save-all-org-buffers
	"gj" 'org-agenda-goto-date
	"gJ" 'org-agenda-clock-goto
	"gm" 'org-agenda-bulk-mark
	"go" 'org-agenda-open-link
	"s" 'org-agenda-schedule
	"+" 'org-agenda-priority-up
	"," 'org-agenda-priority
	"-" 'org-agenda-priority-down
	"y" 'org-agenda-todo-yesterday
	"n" 'org-agenda-add-note
	"t" 'org-agenda-todo
	":" 'org-agenda-set-tags
	";" 'org-timer-set-timer
	"I" 'helm-org-task-file-headings
	"i" 'org-agenda-clock-in-avy
	"O" 'org-agenda-clock-out-avy
	"u" 'org-agenda-bulk-unmark
	"x" 'org-agenda-exit
	"j"  'org-agenda-next-line
	"k"  'org-agenda-previous-line
	"vt" 'org-agenda-toggle-time-grid
	"va" 'org-agenda-archives-mode
	"vw" 'org-agenda-week-view
	"vl" 'org-agenda-log-mode
	"vd" 'org-agenda-day-view
	"vc" 'org-agenda-show-clocking-issues
	"g/" 'org-agenda-filter-by-tag
	"o" 'delete-other-windows
	"gh" 'org-agenda-holiday
	"gv" 'org-agenda-view-mode-dispatch
	"f" 'org-agenda-later
	"b" 'org-agenda-earlier
	"c" 'helm-org-capture-templates
	"e" 'org-agenda-set-effort
	"n" nil  ; evil-search-next
	"{" 'org-agenda-manipulate-query-add-re
	"}" 'org-agenda-manipulate-query-subtract-re
	"A" 'org-agenda-toggle-archive-tag
	"." 'org-agenda-goto-today
	"0" 'evil-digit-argument-or-evil-beginning-of-line
	"<" 'org-agenda-filter-by-category
	">" 'org-agenda-date-prompt
	"F" 'org-agenda-follow-mode
	"D" 'org-agenda-deadline
	"H" 'org-agenda-holidays
	"J" 'org-agenda-next-date-line
	"K" 'org-agenda-previous-date-line
	"L" 'org-agenda-recenter
	"P" 'org-agenda-show-priority
	"R" 'org-agenda-clockreport-mode
	"Z" 'org-agenda-sunrise-sunset
	"T" 'org-agenda-show-tags
	"X" 'org-agenda-clock-cancel
	"[" 'org-agenda-manipulate-query-add
	"g\\" 'org-agenda-filter-by-tag-refine
	"]" 'org-agenda-manipulate-query-subtract)))
#+END_SRC
*** org-mode
    #+BEGIN_SRC emacs-lisp
      (require 'org)
      (define-key global-map "\C-cl" 'org-store-link)
      (define-key global-map "\C-ca" 'org-agenda)
      (setq org-log-done t)
    #+END_SRC
    #+BEGIN_SRC emacs-lisp
      (setq org-agenda-files (list "~/org/work.org"
				   "~/org/school.org"
				   "~/org/home.org"))
    #+END_SRC
   
** File
*** Auto generated file
    禁止自动生成`filename.fileext~`的备份文件, 因为我们用Git
    #+BEGIN_SRC emacs-lisp
      (setq make-backup-files nil)
    #+END_SRC
*** dired
    - 递归的copy or delete, 避免被询问
    #+BEGIN_SRC emacs-lisp
      (setq dired-recursive-deletes 'always)
      (setq dired-recursive-copies 'always)
    #+END_SRC
    
   - 为了更快的emacs启动速度, 可以优化为延迟加载, 即仅当该插件被使用时加载特性
   #+BEGIN_SRC emacs-lisp
     (put 'dired-find-alternate-file 'disabled nil) ;
     ;; 主动加载
     ;; (require 'dired)
     ;; (defined-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)

     ;; 延迟加载
     (with-eval-after-load 'dired
	 (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
   #+END_SRC
   
*** rencent file
    Remeber recent files.
    #+BEGIN_SRC elisp
      ; (require 'recentf)
      (recentf-mode 1)
      (setq recentf-max-menu-item 30)
    #+END_SRC
*** helm-ag
**** [[https://github.com/ggreer/the_silver_searcher][ag]]
    - Windows 10 install via `Snoop`:
    #+begin_src bash
      # install scoop for in powershell for win10
      iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
      # install ag via scoop
      scoop install ag
    #+end_src
    
**** [[https://melpa.org/#/helm-ag][helm-ag]]
     - Sample Configuration
     #+begin_src elisp
       (custom-set-variables
	'(helm-ag-base-command "ag --nocolor --nogroup --ignore-case")
	'(helm-ag-command-option "--all-text")
	'(helm-ag-insert-at-point 'symbol)
	'(helm-ag-ignore-buffer-patterns '("\\.txt\\'" "\\.mkd\\'")))
     #+end_src
     
     - keybinding
       #+begin_src elisp
	 (global-set-key (kbd "C-c p s") 'helm-do-ag-project-root)
       #+end_src
     
** Buffer
** Window
    #+BEGIN_SRC emacs-lisp
      (require 'popwin)
      (popwin-mode 1)
    #+END_SRC
   
** Syntax
*** [[https://github.com/joaotavora/yasnippet/tree/e45e3de357fbd4289fcfa3dd26aaa7be357fb0b8][yasnippet]]
    #+begin_src elisp
      (add-hook 'prog-mode-hook #'yas-minor-mode)
    #+end_src
*** flycheck
    #+begin_src elisp
      (global-flycheck-mode t)
    #+end_src
*** Company
#+BEGIN_SRC emacs-lisp
  (global-company-mode t)
  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(company-tooltip-idle-delay 0.2)
  '(custom-safe-themes
  (quote
      ("bd7b7c5df1174796deefce5debc2d976b264585d51852c962362be83932873d9" default))))
  (custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  )
#+END_SRC
   
*** More
    #+BEGIN_SRC emacs-lisp
    (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
    ;;(global-set-key (kbd "\C-x \C-x") ' )
    #+END_SRC
** Git
** Command
** ivy & swiper & counsel
   用于各种搜索
   #+BEGIN_SRC emacs-lisp
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     ;; enable this if you want `swiper' to use it
     ;; (setq search-default-mode #'char-fold-to-regexp)
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "<f6>") 'ivy-resume)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
     (global-set-key (kbd "C-x l") 'counsel-locate)
     (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (global-set-key (kbd "\C-x \C-b") 'ivy-switch-buffer)
     (global-set-key (kbd "\C-x \C-d") 'dired-jump)
     (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
   #+END_SRC
** More
   - Auto load major-mode according to file type.
  #+begin_src elisp
    (setq auto-mode-alist
	  (append
	   '(("\\.js\\'" . js2-mode))
	   '(("\\.html\\'" . web-mode))
	   auto-mode-alist))
  #+end_src
  
  - Change indent offset
  #+begin_src elisp
    (defun my-web-mode-indent-setup ()
      (setq web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
      (setq web-mode-css-indent-offset 2)    ; web-mode, css in html file
      (setq web-mode-code-indent-offset 2)   ; web-mode, js code in html file
      )
    (add-hook 'web-mode-hook 'my-web-mode-indent-setup)
  #+end_src
  
   - Save-excursion :: save and restore current cursor position
    #+BEGIN_SRC elisp
      (defun remove-dos-eol ()
	  "Replace CRLF to CR."
	  (interactive)
	  (save-excursion 
	      (goto-char (point-min))
	      (while (search-forward "\r" nil t)
		  (replace-match "")
		  )
	      )
	  )
    #+END_SRC

     - [[https://emacs.stackexchange.com/questions/46988/easy-templates-in-org-9-2][Insert this code in case that `<s` doesn't expand as expected.]]
     #+begin_src elisp
       (require 'org-tempo)
     #+end_src
     
     - Expand region
     #+begin_src elisp
       (global-set-key (kbd "C-=") 'er/expand-region)
     #+end_src
     
     - Advanced show-parenthesis
       #+begin_src elisp
	 (define-advice show-paren-function (:around (fn) fix-show-paren-function)
	   "Highlight enclosing parens."
	   (cond ((looking-at-p "\\s(") (funcall fn))
		 (t (save-excursion
		      (ignore-errors (backward-up-list))
	      (funcall fn)))))
       #+end_src
