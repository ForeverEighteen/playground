* Define function
  
** Imported
*** Install specified packages
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
     (require 'cl)
     (defvar zxf/packages '(
			    company
			    monokai-theme
			    hungry-delete
			    ivy
			    counsel
			    swiper
			    evil
			    evil-org
			    htmlize
			    ) "Default packages")
     (setq package-selected-packages zxf/packages)
     (defun zxf/packages-installed-p ()
       (loop for pkg in zxf/packages
	     when (not (package-installed-p pkg)) do (return nil)
	     finally (return t)))
     (unless (zxf/packages-installed-p)
       (message "%s" "Refreshing package database...")
       (package-refresh-contents)
       (dolist (pkg zxf/packages)
	 (when (not (package-installed-p pkg))
	   (package-install pkg))))
   #+END_SRC
   
*** Quick hack
   #+BEGIN_SRC emacs-lisp
     (defun quick-open-init-file()
	 (interactive)
       (find-file "~/.emacs.d/init.el"))
     (global-set-key (kbd "<f4>") 'quick-open-init-file)
   #+END_SRC
   
** DIY
   - todo


* Default
  
** settings
    #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
    (load-theme 'monokai t)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (global-linum-mode t)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
    (global-hl-line-mode t)
    ;;(global-set-key (kbd "\C-x \C-x") ' )
    #+END_SRC

** dired
   为了更快的emacs启动速度, 可以优化为延迟加载, 即仅当该插件被使用时加载特性
   #+BEGIN_SRC emacs-lisp
     (put 'dired-find-alternate-file 'disabled nil)
     ;; 主动加载
     ;; (require 'dired)
     ;; (defined-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)

     ;; 延迟加载
     (with-eval-after-load 'dired
	 (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
   #+END_SRC
   
** ivy & swiper & counsel
   用于各种搜索
   #+BEGIN_SRC emacs-lisp
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     ;; enable this if you want `swiper' to use it
     ;; (setq search-default-mode #'char-fold-to-regexp)
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "<f6>") 'ivy-resume)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
     (global-set-key (kbd "C-x l") 'counsel-locate)
     (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (global-set-key (kbd "\C-x \C-b") 'ivy-switch-buffer)
     (global-set-key (kbd "\C-x \C-d") 'dired-jump)
     (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
   #+END_SRC


* melpa packages

** company

#+BEGIN_SRC emacs-lisp
  (global-company-mode t)
  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(company-tooltip-idle-delay 0.2)
  '(custom-safe-themes
  (quote
      ("bd7b7c5df1174796deefce5debc2d976b264585d51852c962362be83932873d9" default))))
  (custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  )
#+END_SRC
   
** evil
*** Enable evil
     #+BEGIN_SRC emacs-lisp
       (require 'evil)
       (evil-mode 1)
     #+END_SRC

*** Add extra keybindings to cover the shortage of evil (towards the default vim)
     - Use c-h to delete char
       #+BEGIN_SRC emacs-lisp
	 (define-key evil-insert-state-map "\C-h" 'evil-delete-backward-char)
       #+END_SRC
     - Use C-u to scroll up in normal mode
       #+BEGIN_SRC emacs-lisp
	 (define-key evil-normal-state-map "\C-u" 'evil-scroll-up)
       #+END_SRC
     - Treat `underscore_word` as one single word, not two
       #+BEGIN_SRC emacs-lisp
	 (with-eval-after-load 'evil
	     (defalias #'forward-evil-word #'forward-evil-symbol))
       #+END_SRC
     - Use TAB to org-cycle in [org-mode && evil-normal mode]
       #+BEGIN_SRC emacs-lisp
	 (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle)
       #+END_SRC

** latex
#+BEGIN_SRC emacs-lisp
  ;; (require 'auctex-latexmk)
  ;; (auctex-latexmk-setup)
#+END_SRC

** evil-org
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/plugins/evil-org")
     (require 'evil-org)
     (add-hook 'org-mode-hook 'evil-org-mode)
     (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
     (require 'evil-org-agenda)
     (evil-org-agenda-set-keys)
     (setq evil-want-C-i-jump nil)
   #+END_SRC
   
* Keybindings
** Edit
** Navigation
*** File
*** Buffer
** Plugins
*** Git
    
    
* UI
