* Tensorflow
** Deployment
*** TF service
    models.conf file:
    #+BEGIN_SRC json
      model_config_list: {

	config: {
	  name: "model1",
	  base_path: "/tmp/model",
	  model_platform: "tensorflow"
	},
	config: {
	   name: "model2",
	   base_path: "/tmp/model2",
	   model_platform: "tensorflow"
	}
      }
   #+END_SRC

   start tf service using models.conf:
   #+BEGIN_SRC bash
     tensorflow_model_server --port=9000 --model_config_file=/serving/models.conf
   #+END_SRC

    - [[https://stackoverflow.com/questions/45749024/how-can-i-use-tensorflow-serving-for-multiple-models][How can I use tensorflow serving for multiple models - Stack Overflow]]

* Docker
** copy
*** docker cp
    #+BEGIN_SRC bash
      # host -> container
      docker cp /host/path/target <container_id>:/file/path/within/container
      # container -> host
      docker cp <containerId>:/file/path/within/container /host/path/target
    #+END_SRC
*** COPY
    - COPY when building:
    #+begin_src bash
      COPY . /file/path/within/image
      # NOT this way
      COPY * /file/path/within/image
    #+end_src

    - Ignore certain files using =.dockerignore=
    #+begin_src text
      .git*
      .dockerignore
      Dockerfile
    #+end_src

    - Reference
      1. [[https://github.com/moby/moby/issues/15858][Dockerfile COPY with file globs will copy files from subdirectories to the destination directory]]
* Linux
** Bash
*** if-fi/test
    - test :: try to run these lines in bash.
   #+begin_src bash
     $(test "$LINGVO_DEVICE" = "gpu" && echo "--runtime=nvidia")
     test "$LINGVO_DEVICE" = "gpu" && echo "--runtime=nvidia"
   #+end_src

   - =-f= file existance
   #+begin_src bash
     FILE=/etc/resolv.conf
     if test -f "$FILE"; then
	 echo "$FILE exist"
     fi
     # or use =&&= and =||=
     test -f /etc/resolv.conf && echo "$FILE exist"
     [ -f /etc/resolv.conf ] && echo "$FILE exist" || echo "$FILE does not exist"
   #+end_src

    - =-x= executable
   #+begin_src bash
     if [ ! -x "$folder"]; then
     mkdir "$folder"
     fi
   #+end_src

   - =-d= directory existence
   #+begin_src bash
     if [ ! -d "$folder"]; then
     mkdir "$folder"
     fi
   #+end_src

   - Reference
     - [[https://stackoverflow.com/questions/18119689/command-not-found-in-bashs-if-else-condition-when-using-d-dir][Add space between square brackets]]
     - [[https://linuxize.com/post/bash-check-le-exists/][How to Check if a File or Directory Exists in Bash]]

*** cp
    - cp =-L= :: copy follow symbolic link
    #+begin_src bash
      cp -r -L source dest
    #+end_src

    - Reference
      - [[https://superuser.com/questions/216919/how-to-copy-symlinks-to-target-as-normal-folders][How to copy symlinks to target as normal folders]]

*** for do done
    - easy way
    #+begin_src bash
      for i in hello world 'hello world'
      do
	  echo $i
      done
    #+end_src

    - advanced
    #+begin_src bash
      strings=(
	string1
	string2
	"string with spaces"
	stringN
      )
      for i in "${strings[@]}"; do
	echo "$i"
      done
    #+end_src

*** args with default values
    - You can set a default value for a variable like so:
    #+begin_src bash
      ARG1=${1:-foo}
      ARG2=${2:-bar}
      ARG3=${3:-1}
      ARG4=${4:-$(date)}
      echo "$ARG1"
      echo "$ARG2"
      echo "$ARG3"
      echo "$ARG4"
    #+end_src
    - Reference
      - [[https://stackoverflow.com/questions/9332802/how-to-write-a-bash-script-that-takes-optional-input-arguments][How to write a bash script that takes optional input arguments? - Stack Overflow]]
*** apt install vim
    #+BEGIN_SRC bash
      apt-get update
      apt-get install apt-file
      apt-file update
      apt-get install vim
    #+END_SRC


* python
** package
*** [[https://github.com/requests/toolbelt][requests-toolbelt]]
   - Install
   #+begin_src bash
     conda install requests-toolbelt
     # or
     pip install requests-toolbelt
   #+end_src

   - Quick use
   #+begin_src python
     from requests_toolbelt import MultipartEncoder
     import requests

     m = MultipartEncoder(
	 fields={'field0': 'value', 'field1': 'value',
		 'field2': ('filename', open('file.py', 'rb'), 'text/plain')}
	 )

     r = requests.post('http://httpbin.org/post', data=m,
		       headers={'Content-Type': m.content_type})
   #+end_src
*** json
    - [[https://codeyarns.com/2017/02/22/python-json-dump-misses-last-newline/][dump with new lines]]
    #+begin_src python
      json.dump(json_data, open("foobar.json", "w"), indent=4)
    #+end_src
    stud



    keycode 66 = Mode_switch
keysym h = h H Left
keysym l = l L Right
keysym k = k K Up
keysym j = j J Down
keysym u = u U Prior
keysym i = i I Home
keysym o = o O End
keysym p = p P Next
https://unix.stackexchange.com/questions/414926/bind-capshjkl-to-arrow-keys-caps-to-esc



https://superuser.com/questions/463312/how-to-configure-ctrlh-as-backspace-under-google-chrome


If you want to modify the bindings, the Emacs binding can be found in /usr/share/themes/Emacs/gtk-3.0/gtk-keys.css, which can be copied over to ~/.config/gtk-3.0/gtk.css and modified.
On GTK3, the ~/.gtkrc-2.0 method no longer works. Instead, edit the ~/.config/gtk-3.0/settings.ini and add the following line to the end:
gtk-key-theme-name=Emacs

*** YAML
**** list anchor

     #+begin_src yaml
       pos_category: &pos_category
       in_set: *pos_category
     #+end_src
*** pandas
**** str
     #+begin_src python
       df = pd.read_csv(filein, sep='\t')\
              .drop_duplicates(subset='img_url', keep='last')
       df = df[df.img_url.str.endswith('.jpg')]
       # and also
       df = df[df.img_url.str.contains('.jpg')]
     #+end_src

*** glob
    Sort files by date
    #+begin_src python
      import glob
      import os
      files = glob.glob("*.txt")
      files.sort(key=os.path.getmtime)
      print("\n".join(files))
    #+end_src
*** os
**** os.path.getctime
    #+begin_src python
      # Python program to explain os.path.getmtime() method

      # importing os and time module
      import os
      import time

      # Path
      path = '/home/User/Documents/file.txt'

      # Get the time of last
      # modifation of the specified
      # path since the epoch
      modification_time = os.path.getmtime(path)
      print("Last modification time since the epoch:", access_time)

      # convert the time in
      # seconds since epoch
      # to local time
      local_time = time.ctime(modification_time)
      print("Last modification time(Local time):", local_time)
    #+end_src

* Vim tips
  delete all lines that are empty or that contain only whitespace chracters(spaces, tabs)
  #+begin_src  bash
    :g/^\s*$/d
    :v/\S/d
  #+end_src

* linux tool
  [[https://centos.pkgs.org/7/epel-x86_64/aria2-1.34.0-5.el7.x86_64.rpm.html][aria2 rpm]]

* gcc-7.3 g++-7.3
  #+begin_src bash
    conda install gcc_linux-64
    conda install gxx_linux-64
  #+end_src

* install neovim & SpaceVim
  #+begin_src bash
    # https://github.com/neovim/neovim/wiki/Installing-Neovim
    yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    yum install -y neovim python{2,3}-neovim
    curl -sLf https://spacevim.org/install.sh | bash
    # [[layers]]
    #   name = "lang#python"
  #+end_src

* multi-class precsion & recall
  #+begin_src python
    from sklearn.metrics import confusion_matrix
    import numpy as np

    labels = ...
    predictions = ...

    cm = confusion_matrix(labels, predictions)
    recall = np.diag(cm) / np.sum(cm, axis = 1)
    precision = np.diag(cm) / np.sum(cm, axis = 0)
  #+end_src
